<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>code on George Thomas</title><link>https://geotho.github.io/categories/code/</link><description>Recent content in code on George Thomas</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 31 Jul 2016 21:44:00 +0000</lastBuildDate><atom:link href="https://geotho.github.io/categories/code/index.xml" rel="self" type="application/rss+xml"/><item><title>Analysing runtime of algorithms</title><link>https://geotho.github.io/post/2016-07-31-analysing-runtime-algorithms/</link><pubDate>Sun, 31 Jul 2016 21:44:00 +0000</pubDate><guid>https://geotho.github.io/post/2016-07-31-analysing-runtime-algorithms/</guid><description>In this post, I consider four different algorithms that solve the same problem.
The problem Imagine a square 2D array that contains only zeroes and ones. Each row and column is sorted in ascending order. Count the number of zeroes.
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 I found this problem on CareerCup and was drawn initially to the uncertainty about the fastest possible algorithm.</description></item><item><title>Missing the forest for the trees in code reviews</title><link>https://geotho.github.io/post/2016-07-28-forest-for-the-trees/</link><pubDate>Thu, 28 Jul 2016 17:06:00 +0000</pubDate><guid>https://geotho.github.io/post/2016-07-28-forest-for-the-trees/</guid><description>Reading through a pull request earlier this week, I came across some code that read:
function addPanel(p) { panels.push(p); if (panels.length &amp;gt; 0) { p.open(); } } Feeling smug, I commented that if (panels.length &amp;gt; 0) should be shortened to if (panels.length).
In hindsight, a more helpful comment would have been that panels.length &amp;gt; 0 will always be true in this scenario and therefore the code is likely to be erroneous.</description></item><item><title>Writing a Kakuro solver in CoffeeScript</title><link>https://geotho.github.io/post/2016-07-07-kakuro-solving/</link><pubDate>Thu, 07 Jul 2016 13:00:00 +0000</pubDate><guid>https://geotho.github.io/post/2016-07-07-kakuro-solving/</guid><description>A Kakuro is a Japanese number puzzle with the following rules:
Each row and column must add up to the number directly above or to the left of it; You can only use the numbers one to nine; Each number in the row or column must be distinct. I&amp;rsquo;ve written a Kakuro solver which you can play around with here: http://geotho.github.io/kakuro-solver/
If you are interested in seeing the solving code, you can do so here.</description></item><item><title>Reject unrecognised parameters</title><link>https://geotho.github.io/post/2016-02-22-reject-unrecognised-parameters/</link><pubDate>Mon, 22 Feb 2016 17:56:47 +0000</pubDate><guid>https://geotho.github.io/post/2016-02-22-reject-unrecognised-parameters/</guid><description>TL;DR: your API or library should error if it is passed parameters it does not recognise.
I recently spent a week debugging a friend&amp;rsquo;s JavaScript code. A datepicker library seemingly wasn&amp;rsquo;t picking up changes to the date format, supplied through options like so:
\$(&amp;#34;#datepicker&amp;#34;).datepicker({ &amp;#34;dateFormat&amp;#34;: &amp;#34;yy-mm-dd&amp;#34;, }); We arrived at the solution after 43 emails â€“ the code was using bootstrap-datepicker while the options were from jQueryUI-datapicker. We should have been using format rather than dateFormat.</description></item></channel></rss>