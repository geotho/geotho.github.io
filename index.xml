<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>George Thomas</title><link>https://geotho.github.io/</link><description>Recent content on George Thomas</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 12 Aug 2020 21:26:52 +0100</lastBuildDate><atom:link href="https://geotho.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>An approach for system design interviews</title><link>https://geotho.github.io/post/2020-08-12-approach-for-system-design-interviews/</link><pubDate>Wed, 12 Aug 2020 21:26:52 +0100</pubDate><guid>https://geotho.github.io/post/2020-08-12-approach-for-system-design-interviews/</guid><description>What is a system design interview? ü§î Tech companies sometimes ask for system design interviews. These assess a few different areas, including:
extracting concrete requirements from loose specifications; estimations; making tradeoffs between different technologies or requirements; knowledge of different subsystems (cloud platforms, container orchestrators, queuing systems&amp;hellip;); ability to produce a feasible design that meets business requirements. Why do I need a structured approach? ü§∑üèª‚Äç‚ôÇÔ∏è Unlike coding interviews, system design interviews benefit much more from a structured approach.</description></item><item><title>What I learnt writing machine learning tooling</title><link>https://geotho.github.io/post/2020-08-09-what-i-learnt-data-science-tooling/</link><pubDate>Sun, 09 Aug 2020 16:33:10 +0100</pubDate><guid>https://geotho.github.io/post/2020-08-09-what-i-learnt-data-science-tooling/</guid><description>Project overview üêü I spent about a year working on machine learning tooling. The goals of the project were:
Shorten time from a prototype (typically a Jupyter Notebook) to production code. Unify access to production data, providing security, auditability and telemetry. Provide a secure, scalable, multi-tenant platform for hosting models, potentially from third-party users. Technology learnings üë©üèª‚Äçüíª We built a system on top of Kubernetes for model storing and serving.</description></item><item><title>Uniform random selection from a channel</title><link>https://geotho.github.io/post/2020-06-29-uniform-random-selection-from-channel/</link><pubDate>Mon, 29 Jun 2020 16:26:00 +0100</pubDate><guid>https://geotho.github.io/post/2020-06-29-uniform-random-selection-from-channel/</guid><description>Selecting a item uniformly at random from an array is quite easy:
func randomPickSlice(items []string) string { i := rand.Intn(len(items)) return items[i] } How could we do this with a channel, rather than a slice?
One way would be simply to read items to a slice first, then use randomPickSlice:
func randomPickChan(items &amp;lt;-chan string) string { var allItems []string for s := range items { allItems = append(allItems, s) } return randomPickSlice(allItems) } But this requires us to store all the items in memory at the same time, which might not be possible.</description></item><item><title>Jekyll to Hugo</title><link>https://geotho.github.io/post/jekyll-to-hugo/</link><pubDate>Thu, 28 May 2020 22:44:51 +0100</pubDate><guid>https://geotho.github.io/post/jekyll-to-hugo/</guid><description>I&amp;rsquo;ve ported my blog from Jekyll to Hugo.
Why? I couldn&amp;rsquo;t build the old Ruby stack anymore. I like Go, and Hugo is written in Go. What changed? Theme changed. Source code of blog lives in geotho/hugo. GitHub Actions builds and commits the built blog to geotho/geotho.github.io. Switched to \({\KaTeX}\) from MathJax.</description></item><item><title>Random weighted sampling</title><link>https://geotho.github.io/post/2018/2018-08-26-weighted-sampling/</link><pubDate>Sun, 26 Aug 2018 00:00:00 +0000</pubDate><guid>https://geotho.github.io/post/2018/2018-08-26-weighted-sampling/</guid><description>Suppose you have some mapping from keys to weights and you want to pick a key at random from the map proportional to its weight. How do you do it?
Build a map that stores (key, weight) pairs. Remember the total weight of the map. When picking, pick a random number r, then iterate through the map. If the value v for key k is greater than r, return k. Otherwise, subtract v from r and continue.</description></item><item><title>Unit testing non-determinstic functions</title><link>https://geotho.github.io/post/2017/2017-08-02-unittest-nondeterminism/</link><pubDate>Wed, 02 Aug 2017 00:00:00 +0000</pubDate><guid>https://geotho.github.io/post/2017/2017-08-02-unittest-nondeterminism/</guid><description>A trend I&amp;rsquo;ve noticed among whiteboard-coding type questions is to ask questions about randomness.
Examples of these questions are things like:
pick a random element from an array. given a method rand5() that returns a integer between 0 and 4 inclusive uniformly at random, implement rand7(). implement randomOdd(int min, int max), which returns a random odd number between min and max. implement randomPrime(int min, int max), which returns a random prime number between min and max.</description></item><item><title>I'm an integer overflow survivor</title><link>https://geotho.github.io/post/2017/2017-07-03-integer-overflow/</link><pubDate>Mon, 03 Jul 2017 00:00:00 +0000</pubDate><guid>https://geotho.github.io/post/2017/2017-07-03-integer-overflow/</guid><description>I always knew integer overflow existed, but I never thought it could happen to me.
I want to recount my cautionary tale, to avoid the same mistake in future.
The task was to write a func isPerfectSquare(num int) bool, with isPerfectSquare(16) == true and isPerfectSquare(5) == false etc. No standard library sqrt functions are allowed.
So I thought &amp;ldquo;I can use a binary search!&amp;rdquo; Go makes binary searching very, very easy:</description></item><item><title>Ways Go made me a better programmer</title><link>https://geotho.github.io/post/2017/2017-06-06-go-better-programmer/</link><pubDate>Tue, 06 Jun 2017 00:00:00 +0000</pubDate><guid>https://geotho.github.io/post/2017/2017-06-06-go-better-programmer/</guid><description>Language influences thought, and programming languages are no different. Writing code in a new language makes you frame the problem in fresh way. Go has narrowed my focus in a few areas, and I feel like a better programmer as a result. Some of the features of Go that have helped me improve are below.
Interfaces Interfaces in Go are easy to create and to implement. You can make any type implement any interface by creating a custom type and attaching methods to it.</description></item><item><title>Levelling up Go table-driven tests</title><link>https://geotho.github.io/post/2017/2017-04-13-go-table-test-tips/</link><pubDate>Thu, 13 Apr 2017 00:00:00 +0000</pubDate><guid>https://geotho.github.io/post/2017/2017-04-13-go-table-test-tips/</guid><description>Writing table-driven tests allows me to focus on the inputs and expected outputs of my code, rather than the boilerplate needed to make the test work.
Here are some opinionated tips on how to make yours even better, both for you and others on your team:
Use a named testcase struct // bad func TestFooer(t *testing.T) { tests := []struct{ inputOne, inputTwo string expected int }{} } // good func TestFooer(t *testing.</description></item><item><title>You don't always have to change that function signature</title><link>https://geotho.github.io/post/2017/2017-03-25-function-signature/</link><pubDate>Sat, 25 Mar 2017 00:00:00 +0000</pubDate><guid>https://geotho.github.io/post/2017/2017-03-25-function-signature/</guid><description>Sometimes, I see functions that have some hardcoded parameters and some that are passed in:
func NewFoo(size int) { return Foo{ Size: size, Name: &amp;#34;Billy&amp;#34;, } } And the NewFoo function is used in many places.
But now imagine that rather than &amp;ldquo;Billy&amp;rdquo;, we want to pass in the value for name.
One option is to change NewFoo to take a size and a name, like this:
func NewFoo(size int, name string) { return Foo{ Size: size, Name: name, } } But then you have to update each usage of NewFoo.</description></item><item><title>Tips for software engineering internships</title><link>https://geotho.github.io/post/2017/2017-03-19-software-engineering-internship-tips/</link><pubDate>Sun, 19 Mar 2017 00:00:00 +0000</pubDate><guid>https://geotho.github.io/post/2017/2017-03-19-software-engineering-internship-tips/</guid><description>I&amp;rsquo;ve done four internships, two at startups and two at Google. Since joining Ravelin full time, I&amp;rsquo;ve had to interview, hire and mentor interns. Here are some tips I wish someone had told me before starting my internships, and indeed that I continually need reminders of even as a full time software engineer:
Remember Hofstadter&amp;rsquo;s Law: it always takes longer than you expect, even when you take into account Hofstadter&amp;rsquo;s Law Writing production-ready software takes a great deal longer than writing it for personal or school use.</description></item><item><title>Whiteboarding coding in the wild: reversing domains for BigTable</title><link>https://geotho.github.io/post/2017/2017-02-12-reversing-domains/</link><pubDate>Sun, 12 Feb 2017 00:00:00 +0000</pubDate><guid>https://geotho.github.io/post/2017/2017-02-12-reversing-domains/</guid><description>A common complaint about whiteboard coding questions is that they do not resemble a software engineer‚Äôs day-to-day work. So I like to note the times when these fun toy algorithms have actually come in handy.
A classic whiteboard coding question is as follows:
&amp;ldquo;Given a string containing a sentence, reverse the order of the words in that sentence.&amp;rdquo;
So &amp;ldquo;the quick brown fox&amp;rdquo; should become &amp;ldquo;fox brown quick the&amp;rdquo;.</description></item><item><title>On mindcrime</title><link>https://geotho.github.io/post/2017/2017-01-16-on-mindcrime/</link><pubDate>Mon, 16 Jan 2017 00:00:00 +0000</pubDate><guid>https://geotho.github.io/post/2017/2017-01-16-on-mindcrime/</guid><description>One of the interesting ideas in Bostrom‚Äôs Superintelligence (a book not short on interesting ideas) is that of mindcrime.
Suppose a superintelligence could simulate human beings in order to learn more about their psychology. The crime arises when these simulations lead to cruel experiments which cause the simulated human beings harm. Because a superintelligence is likely to be made of electronics rather than old-fashioned biology, the harm can be caused at light-speed, far more efficiently than any harm humans could directly cause.</description></item><item><title>Thoughts on 'E Unibus Pluram'</title><link>https://geotho.github.io/post/2016/2016-12-26-thoughts-on-e-unibus-pluram/</link><pubDate>Mon, 26 Dec 2016 00:00:00 +0000</pubDate><guid>https://geotho.github.io/post/2016/2016-12-26-thoughts-on-e-unibus-pluram/</guid><description>E Unibus Pluram is David Foster Wallace&amp;rsquo;s prophetic account of TV and its effects on US fiction and society. Though it was written in the early 90s, its arguments are pertinent to TV and social media today.
The essay argues that:
fiction and society are moulded by the average household&amp;rsquo;s consumption of six hours of TV per day; among the most desirable characteristics of a person is their oxymoronic ability to &amp;lsquo;act natural&amp;rsquo; and be physically attractive; the solution to viewers being able to skip adverts by changing channel or recording programmes is to make adverts look more like programmes and make programmes more like adverts (overt: product placement; covert: projection of a certain lifestyle e.</description></item><item><title>cmdotp - Google Authenticator for the command line</title><link>https://geotho.github.io/post/2016/2016-12-22-cmdotp-google-authenticator-for-the-command-line/</link><pubDate>Thu, 22 Dec 2016 00:00:00 +0000</pubDate><guid>https://geotho.github.io/post/2016/2016-12-22-cmdotp-google-authenticator-for-the-command-line/</guid><description>When my phone broke, I no longer had access to the 2FA codes stored in Google Authenticator. This can be a pretty perilous situation, especially if you haven&amp;rsquo;t written down your backup codes.
I&amp;rsquo;ve written cmdotp, which you can use to store your generate 2FA codes on your computer. They are stored encrypted in your home folder. It requires a password any time you want to access the codes.
You could use something like Authy but there&amp;rsquo;s something about cloud-syncing my 2FA codes that doesn&amp;rsquo;t sit right with me.</description></item><item><title>Brief notes on: Homo Deus</title><link>https://geotho.github.io/post/2016/2016-12-12-brief-notes-on-homo-deus/</link><pubDate>Mon, 12 Dec 2016 00:00:00 +0000</pubDate><guid>https://geotho.github.io/post/2016/2016-12-12-brief-notes-on-homo-deus/</guid><description>Homo Deus is Yuval Harari&amp;rsquo;s follow up to the popular Sapiens. It begins by discussing the idea that humans now have the capability to solve the three major problems that have beset it throughout history: famine, plague and war. What problems should we attempt to solve next? Longevity, tedium and divinity.
In part two, the book explores religion and meaning. Humans have traded meaning for freedom by means of liberalism. Though this part presents few new ideas about the future, it sets up the final part of the book nicely.</description></item><item><title>Add JSON tags to Go structs</title><link>https://geotho.github.io/post/2016/2016-12-05-add-json-tags-to-go-structs/</link><pubDate>Mon, 05 Dec 2016 00:00:00 +0000</pubDate><guid>https://geotho.github.io/post/2016/2016-12-05-add-json-tags-to-go-structs/</guid><description>I wrote a thing that adds camelCase JSON tags to Go structs, because this can sometimes be tedious. Find it here: https://geotho.github.io/struct-tag-me/
It would probably be better written as a Go tool.</description></item><item><title>Life without a phone</title><link>https://geotho.github.io/post/2016/2016-11-20-life-without-a-phone/</link><pubDate>Sun, 20 Nov 2016 00:00:00 +0000</pubDate><guid>https://geotho.github.io/post/2016/2016-11-20-life-without-a-phone/</guid><description>One week ago, my three-year-old phone died. I&amp;rsquo;ve been living without one since. Here are some observations (not necessarily negative) of life without a phone:
I have to actively consume emails and messages.
I don&amp;rsquo;t have push notifications turned on for Gmail or Messenger, so I have to go and check them manually on my computer. This has turned out to be quite an exciting event.
I don&amp;rsquo;t know what the weather is like.</description></item><item><title>Recovering privacy zones on Strava</title><link>https://geotho.github.io/post/2016-09-04-recovering-privacy-zones-strava/</link><pubDate>Sun, 04 Sep 2016 00:00:00 +0000</pubDate><guid>https://geotho.github.io/post/2016-09-04-recovering-privacy-zones-strava/</guid><description>Strava is a website for tracking your athletic activity. I upload GPS recordings of my bike rides and it tells me how fast I am on particular segments of the ride.
Part of the fun of Strava is appearing on public leaderboards and seeing where you rank. This requires your activities to be public too, which means you potentially have to show your home or office location.
Not to worry ‚Äì Strava has you covered.</description></item><item><title>Display less stuff</title><link>https://geotho.github.io/post/2016-08-20-display-less-stuff/</link><pubDate>Sat, 20 Aug 2016 00:00:00 +0000</pubDate><guid>https://geotho.github.io/post/2016-08-20-display-less-stuff/</guid><description>Strava is a website for tracking your athletic activity. I recently wanted to find a ride from a year or so ago.
I went to my profile page, and saw this:
It&amp;rsquo;s not obvious how to get to rides before September 2015.
Clicking the drop down menu, I saw this:
&amp;ldquo;Why can I only select from the last three weeks of rides?&amp;rdquo; I thought to myself. But then I realised. This is the year selector.</description></item><item><title>Whiteboard coding interviews have their place too</title><link>https://geotho.github.io/post/2016-08-09-whiteboard-coding-interviews/</link><pubDate>Tue, 09 Aug 2016 00:00:00 +0000</pubDate><guid>https://geotho.github.io/post/2016-08-09-whiteboard-coding-interviews/</guid><description>People don&amp;rsquo;t like whiteboard coding interviews for a variety of reasons:
they are hard; they are stressful; they are not representative of actual work; they can require very specific insight; there is no help available from an IDE, a textbook or Stack Overflow; one can revise for questions that are very similar; and many more&amp;hellip; I&amp;rsquo;ve done many whiteboard coding interviews at places like Google, Facebook and Palantir, and many other similar online tests also.</description></item><item><title>Put 'unsubscribe all' first</title><link>https://geotho.github.io/post/2016-08-03-email-unsubscription-ux/</link><pubDate>Wed, 03 Aug 2016 00:00:00 +0000</pubDate><guid>https://geotho.github.io/post/2016-08-03-email-unsubscription-ux/</guid><description>Put the &amp;lsquo;unsubscribe from all emails&amp;rsquo; button at the top of the email settings page.
I hope this screenshot, courtesy of the Medium unsubscription page, goes some way to explaining why:
You could have saved me seven clicks. You could have put &amp;lsquo;unsubscribe all&amp;rsquo; above the fold. Alas.
Users who end up on your &amp;lsquo;unsubscribe&amp;rsquo; pages are already irritated by the quantity (or perhaps quality) of emails you&amp;rsquo;ve sent ‚Äî avoid irritating them further by making the process more difficult than it need be.</description></item><item><title>Analysing runtime of algorithms</title><link>https://geotho.github.io/post/2016-07-31-analysing-runtime-algorithms/</link><pubDate>Sun, 31 Jul 2016 21:44:00 +0000</pubDate><guid>https://geotho.github.io/post/2016-07-31-analysing-runtime-algorithms/</guid><description>In this post, I consider four different algorithms that solve the same problem.
The problem Imagine a square 2D array that contains only zeroes and ones. Each row and column is sorted in ascending order. Count the number of zeroes.
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 I found this problem on CareerCup and was drawn initially to the uncertainty about the fastest possible algorithm.</description></item><item><title>Missing the forest for the trees in code reviews</title><link>https://geotho.github.io/post/2016-07-28-forest-for-the-trees/</link><pubDate>Thu, 28 Jul 2016 17:06:00 +0000</pubDate><guid>https://geotho.github.io/post/2016-07-28-forest-for-the-trees/</guid><description>Reading through a pull request earlier this week, I came across some code that read:
function addPanel(p) { panels.push(p); if (panels.length &amp;gt; 0) { p.open(); } } Feeling smug, I commented that if (panels.length &amp;gt; 0) should be shortened to if (panels.length).
In hindsight, a more helpful comment would have been that panels.length &amp;gt; 0 will always be true in this scenario and therefore the code is likely to be erroneous.</description></item><item><title>Writing a Kakuro solver in CoffeeScript</title><link>https://geotho.github.io/post/2016-07-07-kakuro-solving/</link><pubDate>Thu, 07 Jul 2016 13:00:00 +0000</pubDate><guid>https://geotho.github.io/post/2016-07-07-kakuro-solving/</guid><description>A Kakuro is a Japanese number puzzle with the following rules:
Each row and column must add up to the number directly above or to the left of it; You can only use the numbers one to nine; Each number in the row or column must be distinct. I&amp;rsquo;ve written a Kakuro solver which you can play around with here: http://geotho.github.io/kakuro-solver/
If you are interested in seeing the solving code, you can do so here.</description></item><item><title>Reject unrecognised parameters</title><link>https://geotho.github.io/post/2016-02-22-reject-unrecognised-parameters/</link><pubDate>Mon, 22 Feb 2016 17:56:47 +0000</pubDate><guid>https://geotho.github.io/post/2016-02-22-reject-unrecognised-parameters/</guid><description>TL;DR: your API or library should error if it is passed parameters it does not recognise.
I recently spent a week debugging a friend&amp;rsquo;s JavaScript code. A datepicker library seemingly wasn&amp;rsquo;t picking up changes to the date format, supplied through options like so:
\$(&amp;#34;#datepicker&amp;#34;).datepicker({ &amp;#34;dateFormat&amp;#34;: &amp;#34;yy-mm-dd&amp;#34;, }); We arrived at the solution after 43 emails ‚Äì the code was using bootstrap-datepicker while the options were from jQueryUI-datapicker. We should have been using format rather than dateFormat.</description></item><item><title>About</title><link>https://geotho.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://geotho.github.io/about/</guid><description>I&amp;rsquo;m George.
You can get in contact with me at &amp;lt;firstname&amp;gt;tamayo&amp;lt;lastname&amp;gt;@gmail.com.
I like: cycling, rock climbing, and art and design.</description></item><item><title>Projects</title><link>https://geotho.github.io/projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://geotho.github.io/projects/</guid><description>strava-stealer Writeup ¬∑ Demo ¬∑ GitHub
How bicycle thieves trained in the art of gradient descent could calculate the origin of your Strava privacy zones.
Kakuro solver Writeup ¬∑ Demo ¬∑ GitHub
Kakuros are like Sudokus but are more entertaining. This JavaScript app solves them using different tricks.
ascii-graph GitHub
A Go library that takes graphs written as strings like:
1 2 \ / 5 / \ 3 4 and converts them to Go code like:</description></item></channel></rss>